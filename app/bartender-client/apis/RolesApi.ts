/* tslint:disable */
/* eslint-disable */
/**
 * bartender
 * Job middleware for i-VRESSE
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface GrantRoleToUserApiRolesRoleIdUserIdPutRequest {
    roleId: string;
    userId: string;
}

export interface RevokeRoleFromUserApiRolesRoleIdUserIdDeleteRequest {
    roleId: string;
    userId: string;
}

/**
 * 
 */
export class RolesApi extends runtime.BaseAPI {

    /**
     * Grant role to user.  Requires super user powers.  Args:     role_id: Role id     user_id: User id     roles: Set of allowed roles     super_user: Check if current user is super.     user_db: User db.  Raises:     HTTPException: When user is not found  Returns:     Roles granted to user.
     * Grant Role To User
     */
    async grantRoleToUserApiRolesRoleIdUserIdPutRaw(requestParameters: GrantRoleToUserApiRolesRoleIdUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling grantRoleToUserApiRolesRoleIdUserIdPut.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling grantRoleToUserApiRolesRoleIdUserIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/roles/{role_id}/{user_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Grant role to user.  Requires super user powers.  Args:     role_id: Role id     user_id: User id     roles: Set of allowed roles     super_user: Check if current user is super.     user_db: User db.  Raises:     HTTPException: When user is not found  Returns:     Roles granted to user.
     * Grant Role To User
     */
    async grantRoleToUserApiRolesRoleIdUserIdPut(requestParameters: GrantRoleToUserApiRolesRoleIdUserIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.grantRoleToUserApiRolesRoleIdUserIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List available roles.  Requires logged in user to be a super user.  Args:     roles: Roles from config.     super_user: Checks if current user is super.  Returns:     List of role names.
     * List Roles
     */
    async listRolesApiRolesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/roles/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * List available roles.  Requires logged in user to be a super user.  Args:     roles: Roles from config.     super_user: Checks if current user is super.  Returns:     List of role names.
     * List Roles
     */
    async listRolesApiRolesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.listRolesApiRolesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Revoke role from user.  Requires super user powers.  Args:     role_id: Role id     user_id: User id     roles: Set of allowed roles     super_user: Check if current user is super.     user_db: User db.  Raises:     HTTPException: When user is not found  Returns:     Roles granted to user.
     * Revoke Role From User
     */
    async revokeRoleFromUserApiRolesRoleIdUserIdDeleteRaw(requestParameters: RevokeRoleFromUserApiRolesRoleIdUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling revokeRoleFromUserApiRolesRoleIdUserIdDelete.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling revokeRoleFromUserApiRolesRoleIdUserIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/roles/{role_id}/{user_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Revoke role from user.  Requires super user powers.  Args:     role_id: Role id     user_id: User id     roles: Set of allowed roles     super_user: Check if current user is super.     user_db: User db.  Raises:     HTTPException: When user is not found  Returns:     Roles granted to user.
     * Revoke Role From User
     */
    async revokeRoleFromUserApiRolesRoleIdUserIdDelete(requestParameters: RevokeRoleFromUserApiRolesRoleIdUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.revokeRoleFromUserApiRolesRoleIdUserIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
